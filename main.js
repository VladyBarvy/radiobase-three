const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const path = require('path');
const DatabaseWrapper = require('./database'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DatabaseWrapper

let mainWindow;
let dbWrapper = null;
let isIpcRegistered = false;

const isDev = process.argv.includes('--dev') || !app.isPackaged;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1300,
    height: 900,
    show: false,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      preload: path.join(__dirname, 'preload.js')
    },
    icon: path.join(__dirname, 'assets/icon.png')
  });

  mainWindow.loadFile('index.html');

  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    if (isDev) {
      // mainWindow.webContents.openDevTools();
    }
  });

  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
    console.error('Failed to load:', errorDescription);
    dialog.showErrorBox('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${errorDescription}`);
  });
}




async function initDatabase() {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    dbWrapper = new DatabaseWrapper();
    await dbWrapper.init();
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    await checkTableStructure(); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await, –µ—Å–ª–∏ checkTableStructure –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å

    return dbWrapper;
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    dialog.showErrorBox('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
function registerIpcHandlers() {
  if (isIpcRegistered) {
    console.log('IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    return;
  }

  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  removeIpcHandlers();

  // IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  ipcMain.handle('get-categories', () => {
    try {
      const result = dbWrapper.all('SELECT * FROM categories ORDER BY name');
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', result.length);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return [];
    }
  });




  ipcMain.handle('get-components', (event, categoryId) => {
    try {
      const components = dbWrapper.all('SELECT * FROM components WHERE category_id = ? ORDER BY name', [categoryId]);
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', categoryId, ':', components.length);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      components.forEach(component => {
        try {
          component.parameters = component.parameters ? JSON.parse(component.parameters) : {};
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', component.id, ':', error);
          component.parameters = {};
        }
      });

      return components;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
      return [];
    }
  });



  ipcMain.handle('get-component', (event, componentId) => {
    try {
      const component = dbWrapper.get('SELECT * FROM components WHERE id = ?', [componentId]);

      if (component) {
        console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', componentId);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç
        try {
          component.parameters = component.parameters ? JSON.parse(component.parameters) : {};
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
          component.parameters = {};
        }

        return component;
      } else {
        console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', componentId);
        return null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
      return null;
    }
  });








  ipcMain.handle('delete-category', (event, id) => {
    try {
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', id);
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–∞—á–∞–ª–∞
      dbWrapper.run('DELETE FROM components WHERE category_id = ?', [id]);

      // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      dbWrapper.run('DELETE FROM categories WHERE id = ?', [id]);

      return { success: true };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return { success: false, error: error.message };
    }
  });



  ipcMain.handle('add-component', (event, component) => {
    try {
      console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);
  
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!component.category_id || !component.name) {
        console.error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
        return { success: false, error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞' };
      }
  
      const result = dbWrapper.run(
        'INSERT INTO components (category_id, name, storage_cell, datasheet_url, quantity, updated_at, parameters, image_data) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
        [
          component.category_id,
          component.name,
          component.storage_cell,
          component.datasheet_url,
          component.quantity,
          component.updated_at,
          JSON.stringify(component.parameters || {}), // ‚Üê –°–Ω–∞—á–∞–ª–∞ parameters
          component.image_data || null              // ‚Üê –ü–æ—Ç–æ–º image_data
        ]
      );
  
      console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω, ID:', result.lastInsertRowid);
  
      // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      dbWrapper.save();
  
      return { success: true, id: result.lastInsertRowid };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
      return { success: false, error: error.message };
    }
  });
  


  ipcMain.handle('delete-component', (event, id) => {
    try {
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', id);
      const result = dbWrapper.run('DELETE FROM components WHERE id = ?', [id]);

      console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–¥–∞–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π:', result.changes);

      // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      dbWrapper.save();

      return { success: true, changes: result.changes };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
      return { success: false, error: error.message };
    }
  });


  // ipcMain.handle('update-component', (event, component) => {
  //   try {
  //     console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);

  //     const result = dbWrapper.run(
  //       'UPDATE components SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, quantity = ?, updated_at = ?, parameters = ? WHERE id = ?',
  //       [
  //         component.category_id,
  //         component.name,
  //         component.storage_cell || null,
  //         component.datasheet_url || null,
  //         component.quantity,
  //         component.updated_at, // –ò—Å–ø–æ–ª—å–∑—É–µ–º updated_at
  //         JSON.stringify(component.parameters || {}),
  //         component.id
  //       ]
  //     );

  //     console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π:', result.changes);

  //     // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  //     dbWrapper.save();

  //     return { success: true, changes: result.changes };
  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
  //     return { success: false, error: error.message };
  //   }
  // });



//   ipcMain.handle('update-component', (event, component) => {
//     try {
//         console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);

//         const result = dbWrapper.run(
//             'UPDATE components SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, quantity = ?, updated_at = ?, parameters = ?, image_data = ? WHERE id = ?',
//             [
//                 component.category_id,
//                 component.name,
//                 component.storage_cell || null,
//                 component.datasheet_url || null,
//                 component.quantity,
//                 component.updated_at,
//                 JSON.stringify(component.parameters || {}),
//                 component.image_data || null, // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
//                 component.id
//             ]
//         );

//         console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π:', result.changes);
//         dbWrapper.save();
//         return { success: true, changes: result.changes };
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
//         return { success: false, error: error.message };
//     }
// });






ipcMain.handle('update-component', (event, component) => {
  try {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', component);

    // üîç –õ–æ–≥–∏—Ä—É–µ–º image_data
    console.log('image_data –¥–ª–∏–Ω–∞:', component.image_data ? component.image_data.length : 'null');

    const result = dbWrapper.run(
      'UPDATE components SET category_id = ?, name = ?, storage_cell = ?, datasheet_url = ?, quantity = ?, updated_at = ?, parameters = ?, image_data = ? WHERE id = ?',
      [
        component.category_id,
        component.name,
        component.storage_cell || null,
        component.datasheet_url || null,
        component.quantity,
        component.updated_at,
        JSON.stringify(component.parameters || {}),
        component.image_data || null,
        component.id
      ]
    );

    console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π:', result.changes);
    dbWrapper.save();
    return { success: true, changes: result.changes };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
    return { success: false, error: error.message };
  }
});





  isIpcRegistered = true;
  console.log('IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}

ipcMain.handle('update-category', async (event, category) => {
  try {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category);
    const result = dbWrapper.run(
      'UPDATE categories SET name = ? WHERE id = ?',
      [category.name, category.id]
    );
    return { success: true, changes: result.changes };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    return { success: false, error: error.message };
  }
});




ipcMain.handle('add-category', (event, name) => {
  try {
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', name);
    const result = dbWrapper.run('INSERT INTO categories (name) VALUES (?)', [name]);

    // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    dbWrapper.save();

    return { success: true, id: result.lastInsertRowid };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    return { success: false, error: error.message };
  }
});



ipcMain.handle('delete-category', async (event, id) => {
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', id);
    // –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–∞—á–∞–ª–∞
    dbWrapper.run('DELETE FROM components WHERE category_id = ?', [id]);

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const result = dbWrapper.run('DELETE FROM categories WHERE id = ?', [id]);

    return { success: true, changes: result.changes };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    return { success: false, error: error.message };
  }
});



function removeIpcHandlers() {
  const handlers = [
    'get-categories', 'get-components', 'get-component', // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ get-component
    'add-category', 'delete-category', 'add-component',
    'update-component', 'delete-component', 'update-category' // ‚Üê –∏ update-category —Ç–æ–∂–µ
  ];

  handlers.forEach(handler => {
    ipcMain.removeHandler(handler);
  });

  isIpcRegistered = false;
  console.log('IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã');
}


app.whenReady().then(async () => {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    await initDatabase();

    registerIpcHandlers();
    createWindow();

    app.on('activate', () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
      }
    });
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
    dialog.showErrorBox('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
    app.quit();
  }
});

app.on('window-all-closed', () => {
  if (dbWrapper) {
    try {
      dbWrapper.close();
      console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  removeIpcHandlers();

  if (process.platform !== 'darwin') app.quit();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  dialog.showErrorBox('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
});




// function checkTableStructure() {
//   try {
//       const tableInfo = dbWrapper.all("PRAGMA table_info(components)");
//       console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã components:', tableInfo);

//       // –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
//       const requiredColumns = ['id', 'category_id', 'name', 'storage_cell', 'datasheet_url', 'quantity', 'updated_at', 'parameters'];
//       const existingColumns = tableInfo.map(col => col.name);

//       console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:', requiredColumns);
//       console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', existingColumns);

//       const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
//       if (missingColumns.length > 0) {
//           console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', missingColumns);
//           // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
//           missingColumns.forEach(col => {
//               if (col === 'updated_at') {
//                   dbWrapper.run('ALTER TABLE components ADD COLUMN updated_at TEXT');
//                   console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ updated_at');
//               }
//           });
//       }
//   } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error);
//   }
// }


// function checkTableStructure() {
//   try {
//     const tableInfo = dbWrapper.all("PRAGMA table_info(components)");
//     console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã components:', tableInfo);

//     // –î–æ–±–∞–≤–∏–ª–∏ image_data –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
//     const requiredColumns = [
//       'id', 'category_id', 'name', 'storage_cell', 'datasheet_url',
//       'quantity', 'updated_at', 'parameters', 'image_data'  // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
//     ];
//     const existingColumns = tableInfo.map(col => col.name);

//     console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', existingColumns);

//     const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
//     if (missingColumns.length > 0) {
//       console.log('–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', missingColumns);

//       missingColumns.forEach(col => {
//         if (col === 'updated_at') {
//           dbWrapper.run('ALTER TABLE components ADD COLUMN updated_at TEXT');
//           console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ updated_at');
//         }
//         if (col === 'image_data') {
//           dbWrapper.run('ALTER TABLE components ADD COLUMN image_data TEXT'); // –∏–ª–∏ BLOB
//           console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ image_data');
//         }
//       });
//     }
//   } catch (error) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error);
//   }
// }




function checkTableStructure() {
  try {
  const tableInfo = dbWrapper.all("PRAGMA table_info(components)");
  console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã components:', tableInfo); // ‚Üê –í–ê–ñ–ù–û
 
  const requiredColumns = [
  'id', 'category_id', 'name', 'storage_cell', 'datasheet_url',
  'quantity', 'updated_at', 'parameters', 'image_data'
  ];
 
  const existingColumns = tableInfo.map(col => col.name);
  console.log('üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', existingColumns);
 
  const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
  if (missingColumns.length > 0) {
  console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏:', missingColumns);
  missingColumns.forEach(col => {
  if (col === 'updated_at') {
  dbWrapper.run('ALTER TABLE components ADD COLUMN updated_at TEXT');
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ updated_at');
  }
  if (col === 'image_data') {
  dbWrapper.run('ALTER TABLE components ADD COLUMN image_data TEXT');
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ image_data');
  }
  });
  } else {
  console.log('‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ, –≤–∫–ª—é—á–∞—è image_data');
  }
 
  } catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error);
  }
 }

 